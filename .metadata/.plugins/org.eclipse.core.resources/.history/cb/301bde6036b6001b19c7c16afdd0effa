package _4.Operators;

public class BitwiseOperator {
	
	/*The unary bitwise complement operator "~" inverts a bit pattern; 
	 
it can be applied to any of the integral types, making every "0" a "1" and every "1" a "0". 

For example, a byte contains 8 bits; applying this operator to a value whose bit pattern is "00000000" would change its pattern to "11111111".

The signed left shift operator "<<" shifts a bit pattern to the left, 

and the signed right shift operator ">>" shifts a bit pattern to the right. 

The bit pattern is given by the left-hand operand, and the number of positions to shift by the right-hand operand. 

The unsigned right shift operator ">>>" shifts a zero into the leftmost position,

 while the leftmost position after ">>" depends on sign extension.

The bitwise & operator performs a bitwise AND operation.

The bitwise ^ operator performs a bitwise exclusive OR operation.

The bitwise | operator performs a bitwise inclusive OR operation.*/
	
	
	public static void main(String[] args) {
		
		/* '&&' uses short circuit behavior which means java only checks second or other operands only if it is needed.
		 * '&'  uses standard behavior which means you check all the operands even it is not needed. these behavior is same for "or"
		 * */
		
		
	}

}
